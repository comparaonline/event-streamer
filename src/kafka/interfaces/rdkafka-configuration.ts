type pointer = any;
type interceptors = any;

interface RDKafkaFullConfiguration {
  'builtin.features': string;
  'client.id': string;
  'metadata.broker.list': string;
  'bootstrap.servers': string;
  'message.max.bytes': number;
  'message.copy.max.bytes': number;
  'receive.message.max.bytes': number;
  'max.in.flight.requests.per.connection': number;
  'max.in.flight': number;
  'metadata.request.timeout.ms': number;
  'topic.metadata.refresh.interval.ms': number;
  'metadata.max.age.ms': number;
  'topic.metadata.refresh.fast.interval.ms': number;
  'topic.metadata.refresh.fast.cnt': number;
  'topic.metadata.refresh.sparse': boolean;
  'topic.blacklist': string;
  'debug': string;
  'socket.timeout.ms': number;
  'socket.blocking.max.ms': number;
  'socket.send.buffer.bytes': number;
  'socket.receive.buffer.bytes': number;
  'socket.keepalive.enable': boolean;
  'socket.nagle.disable': boolean;
  'socket.max.fails': number;
  'broker.address.ttl': number;
  'broker.address.family': 'any' | 'v4' | 'v6';
  'enable.sparse.connections': boolean;
  'reconnect.backoff.jitter.ms': number;
  'reconnect.backoff.ms': number;
  'reconnect.backoff.max.ms': number;
  'statistics.interval.ms': number;
  'enabled_events': number;
  'error_cb': pointer;
  'throttle_cb': pointer;
  'stats_cb': pointer;
  'log_cb': pointer;
  'log_level': number;
  'log.queue': boolean;
  'log.thread.name': boolean;
  'log.connection.close': boolean;
  'background_event_cb': pointer;
  'socket_cb': pointer;
  'connect_cb': pointer;
  'closesocket_cb': pointer;
  'open_cb': pointer;
  'opaque': pointer;
  'default_topic_conf': pointer;
  'internal.termination.signal': number;
  'api.version.request': boolean;
  'api.version.request.timeout.ms': number;
  'api.version.fallback.ms': number;
  'broker.version.fallback': string;
  'security.protocol': 'plaintext' | 'ssl' | 'sasl_plaintext' | 'sasl_ssl';
  'ssl.cipher.suites': string;
  'ssl.curves.list': string;
  'ssl.sigalgs.list': string;
  'ssl.key.location': string;
  'ssl.key.password': string;
  'ssl.certificate.location': string;
  'ssl.ca.location': string;
  'ssl.crl.location': string;
  'ssl.keystore.location': string;
  'ssl.keystore.password': string;
  'sasl.mechanisms': string;
  'sasl.mechanism': string;
  'sasl.kerberos.service.name': string;
  'sasl.kerberos.principal': string;
  'sasl.kerberos.kinit.cmd': string;
  'sasl.kerberos.keytab': string;
  'sasl.kerberos.min.time.before.relogin': number;
  'sasl.username': string;
  'sasl.password': string;
  'plugin.library.paths': string;
  'interceptors': interceptors;
  'group.id': string;
  'partition.assignment.strategy': string;
  'session.timeout.ms': number;
  'heartbeat.interval.ms': number;
  'group.protocol.type': string;
  'coordinator.query.interval.ms': number;
  'max.poll.interval.ms': number;
  'enable.auto.commit': boolean;
  'auto.commit.interval.ms': number;
  'enable.auto.offset.store': boolean;
  'queued.min.messages': number;
  'queued.max.messages.kbytes': number;
  'fetch.wait.max.ms': number;
  'fetch.message.max.bytes': number;
  'max.partition.fetch.bytes': number;
  'fetch.max.bytes': number;
  'fetch.min.bytes': number;
  'fetch.error.backoff.ms': number;
  'offset.store.method': 'none' | 'file' | 'broker';
  'consume_cb': pointer;
  'rebalance_cb': pointer;
  'offset_commit_cb': pointer;
  'enable.partition.eof': boolean;
  'check.crcs': boolean;
  'enable.idempotence': boolean;
  'enable.gapless.guarantee': boolean;
  'queue.buffering.max.messages': number;
  'queue.buffering.max.kbytes': number;
  'queue.buffering.max.ms': number;
  'linger.ms': number;
  'message.send.max.retries': number;
  'retries': number;
  'retry.backoff.ms': number;
  'queue.buffering.backpressure.threshold': number;
  'compression.codec': 'none' | 'gzip' | 'snappy' | 'lz4' | 'zstd';
  'compression.type': 'none' | 'gzip' | 'snappy' | 'lz4' | 'zstd';
  'batch.num.messages': number;
  'delivery.report.only.error': boolean;
  'dr_cb': pointer;
  'dr_msg_cb': pointer;
}

export interface RDKafkaConfiguration extends Partial<RDKafkaFullConfiguration> { }
